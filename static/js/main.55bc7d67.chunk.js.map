{"version":3,"sources":["api/apiProxy.js","BattleVisualizer/BattleVisualizer.js","HelpOverlay/HelpOverlay.js","App.js","serviceWorker.js","index.js"],"names":["ApiProxy","fetch","window","location","href","response","this","text","dataset","_createDatasetFromCsv","_cleanYearInDataset","_addGeoToDataset","input","result","headers","items","rows","split","length","pop","shift","map","row","item","fields","i","results","reduce","accumulator","current","year","parseInt","isNaN","push","regex","concat","forEach","captures","exec","BattleVisualizer","props","SCATTER_GL_SIZE","TIMELINE_BACKGROUND_COLOR","TIMELINE_LINE_COLOR","TEXT_COLOR","echartsInstance","apiProxy","currentPropValue","tuples","Object","entries","pair","sort","a","b","name","battleLabel","value","lng","lat","Math","round","abs","self","echarts","init","document","getElementById","loadDataset","onresize","resize","on","dataZoom","getOption","setOption","visualMap","id","min","startValue","max","endValue","textStyle","color","option","backgroundColor","geo","roam","label","emphasis","show","silent","itemStyle","normal","areaColor","borderColor","zoom","bottom","zlevel","grid","top","dimensions","source","xAxis","gridId","type","nameTextStyle","axisLabel","formatter","_formatYear","animation","yAxis","showMinLabel","splitNumber","splitLine","series","progressive","coordinateSystem","symbolSize","blendMode","data","_getScatterSeriesData","opacity","large","tooltip","params","xAxisIndex","yAxisIndex","_getBattleCountByYear","lineStyle","start","end","trigger","seriesIndex","dimension","inRange","outOfRange","value1","value2","className","React","Component","HelpOverlay","state","showFullscreen","toggleFullscreenOverlay","bind","setState","Tooltip","target","rel","Button","variant","onClick","role","aria-labelledby","OverlayTrigger","placement","overlay","renderHouskeepingTooltip","FullscreenOverlay","style","height","openFullscreenOverlay","closeFullscreenOverlay","prevProps","prevState","snapshot","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.55bc7d67.chunk.js","sourcesContent":["/**\n * This is a layer of indirection.\n * There is no backend right now, but consumers of this proxy is agonstic to that.\n */\n\nclass ApiProxy {\n  async loadDataset() {\n    let response = await fetch(`${window.location.href}/db.csv`);\n    let dataset = this._createDatasetFromCsv(await response.text());\n    this._cleanYearInDataset(dataset);\n    this._addGeoToDataset(dataset);\n    return dataset;\n  }\n  _createDatasetFromCsv(input) {\n    let result = {\n      headers: [],\n      items: []\n    };\n    let rows = input.split('\\n');\n    if (rows.length < 1) return result;\n    rows.pop();\n    let headers = rows.shift().split(',');\n    let items = rows.map(function (row) {\n      let item = {};\n      let fields = row.split(',');\n      for (let i = 0; i < headers.length; i++) {\n        item[headers[i]] = fields[i];\n      }\n      return item;\n    });\n    result.headers = headers;\n    result.items = items;\n    return result;\n  }\n  _cleanYearInDataset(dataset) {\n    let results = dataset.items.reduce(function (accumulator, current) {\n      let year = parseInt(current.year);\n      if (!isNaN(year)) {\n        current.year = year;\n        accumulator.push(current);\n      }\n      return accumulator;\n    }, []);\n    dataset.items = results;\n  }\n  _addGeoToDataset(dataset) {\n    let regex = /Point\\((-?[0-9]+[.]?[0-9]*) (-?[0-9]+[.]?[0-9]*)\\)/;\n    dataset.headers = dataset.headers.concat(['lat', 'lng']);\n    dataset.items.forEach(item => {\n      let captures = regex.exec(item['locationCoordinates']);\n      if (captures) {\n        item['lat'] = captures[2];\n        item['lng'] = captures[1];\n      }\n    });\n  }\n}\n\nexport default ApiProxy;","import React from 'react';\nimport echarts from 'echarts';\nimport 'echarts-gl';\nimport 'echarts-maps/world';\nimport './BattleVisualizer.css';\nimport ApiProxy from '../api/apiProxy'\n\nclass BattleVisualizer extends React.Component {\n  SCATTER_GL_SIZE = 3;\n  TIMELINE_BACKGROUND_COLOR = 'rgba(47, 57, 77, 0.5)';\n  TIMELINE_LINE_COLOR = 'rgba(146, 176, 155, 0.5)';\n  TEXT_COLOR = '#fff';\n\n  echartsInstance = null;\n  apiProxy = null;\n\n  constructor(props) {\n    super(props);\n    this.apiProxy = new ApiProxy();\n  }\n\n  _getBattleCountByYear(items) {\n    let results = items.reduce(function (accumulator, current) {\n      let currentPropValue = current['year'];\n      if (!(currentPropValue in accumulator)) {\n        accumulator[currentPropValue] = 0;\n      }\n      accumulator[currentPropValue]++;\n      return accumulator;\n    }, {});\n    let tuples = Object.entries(results).map(function (pair) {\n      pair[0] = parseInt(pair);\n      return pair;\n    });\n    tuples.sort((a, b) => a[0] > b[0] ? 1 : -1);\n    return tuples;\n  }\n  _getScatterSeriesData(dataset) {\n    return dataset.items.map(function (item) {\n      return {\n        name: item.battleLabel,\n        value: [item.lng, item.lat, item]\n      };\n    });\n  }\n  _formatYear(value) {\n    let result = Math.round(value);\n    return Math.abs(result) + (result > 0 ? \" CE\" : \" BCE\");\n  }\n\n  async componentDidMount() {\n    let self = this;\n    this.echartsInstance = echarts.init(document.getElementById('echarts_container'));\n\n    let dataset = await this.apiProxy.loadDataset();\n\n    window.onresize = function () {\n      self.echartsInstance.resize();\n    };\n\n    this.echartsInstance.on('dataZoom', function () {\n      let dataZoom = self.echartsInstance.getOption().dataZoom[0];\n      self.echartsInstance.setOption({\n        visualMap: {\n          id: 'battles-geo-scattergl',\n          min: Math.round(dataZoom.startValue, 0),\n          max: Math.round(dataZoom.endValue, 0),\n          textStyle: {\n            color: self.TEXT_COLOR\n          },\n        }\n      });\n    });\n\n    var option = {\n      backgroundColor: '#000',\n      geo: {\n        map: 'world',\n        roam: true,\n        label: {\n          emphasis: {\n            show: false\n          }\n        },\n        silent: true,\n        itemStyle: {\n          normal: {\n            areaColor: '#323c48',\n            borderColor: '#111'\n          },\n          emphasis: {\n            areaColor: '#2a333d'\n          }\n        },\n        zoom: 2,\n        bottom: '10%',\n        zlevel: 100\n      },\n      grid: [\n        {\n          id: 'battles-time-line',\n          top: '90%',\n          show: true,\n          backgroundColor: self.TIMELINE_BACKGROUND_COLOR,\n          zlevel: 200\n        }\n      ],\n      dataset: {\n        dimensions: dataset.headers,\n        source: dataset.items\n      },\n      xAxis: {\n        id: 'battles-time-line-x',\n        gridId: 'battles-time-line',\n        type: 'value',\n        name: 'Year',\n        nameTextStyle: {\n          color: self.TEXT_COLOR\n        },\n        axisLabel: {\n          textStyle: {\n            color: self.TEXT_COLOR\n          },\n          formatter: self._formatYear\n        },\n        animation: false,\n        zlevel: 201\n      },\n      yAxis: {\n        id: 'battles-time-line-y',\n        gridId: 'battles-time-line',\n        type: 'value',\n        name: '# of Battles per Year',\n        nameTextStyle: {\n          color: self.TEXT_COLOR\n        },\n        axisLabel: {\n          textStyle: {\n            color: self.TEXT_COLOR\n          },\n          showMinLabel: false\n        },\n        splitNumber: 1,\n        splitLine: {\n          show: false\n        },\n        silent: true,\n        animation: false,\n        zlevel: 201,\n      },\n      series: [\n        {\n          id: 'battles-geo-scattergl',\n          type: 'scatterGL',\n          progressive: 1e6,\n          coordinateSystem: 'geo',\n          symbolSize: self.SCATTER_GL_SIZE,\n          blendMode: 'lighter',\n\n          zlevel: 101\n        },\n        {\n          id: 'battles-geo-scatter',\n          type: 'scatter',\n          coordinateSystem: 'geo',\n          data: self._getScatterSeriesData(dataset),\n          symbolSize: 15,\n          itemStyle: {\n            opacity: 0\n          },\n          large: true,\n          animation: false,\n          tooltip: {\n            formatter: function (params) {\n              let item = params.value[2];\n              return item.battleLabel + '<br/>' + self._formatYear(item.year);\n            }\n          },\n          zlevel: 110\n        },\n        {\n          id: 'battles-time-line',\n          type: 'line',\n          xAxisIndex: 0,\n          yAxisIndex: 0,\n          data: this._getBattleCountByYear(dataset.items),\n          lineStyle: {\n            color: self.TIMELINE_LINE_COLOR\n          },\n          itemStyle: {\n            color: self.TEXT_COLOR,\n            borderColor: self.TEXT_COLOR\n          },\n          symbolSize: 1,\n          tooltip: {\n            show: false\n          },\n          animation: false,\n          zlevel: 201,\n        }\n      ],\n      dataZoom: [\n        {\n          id: 'battles-time-line',\n          type: 'slider',\n          show: true,\n          xAxisIndex: [0],\n          start: 40,\n          end: 55,\n          zlevel: 201\n        },\n      ],\n      tooltip: {\n        trigger: 'item',\n      },\n      visualMap: [\n        {\n          id: 'battles-geo-scattergl',\n          seriesIndex: 0,\n          dimension: 'year',\n          type: 'piecewise',\n          splitNumber: 10,\n          min: -3000,\n          max: 3000,\n          inRange: {\n            color: ['#94b9af', '#90a583', '#9d8420', '#593837', '#942911']\n          },\n          outOfRange: {\n            color: ['rgba(0, 0, 0, 0.5)']\n          },\n          textStyle: {\n            color: self.TEXT_COLOR\n          },\n          bottom: '15%',\n          formatter: function (value1, value2) {\n            return self._formatYear(value1) + ' to ' + self._formatYear(value2);\n          },\n          zlevel: 110\n        }\n      ]\n    };\n\n    this.echartsInstance.setOption(option, true);\n  }\n  render() {\n    return (\n      <div className=\"BattleVisualizer\">\n        <div id=\"echarts_container\" className=\"ChartArea\"></div>\n      </div>\n    );\n  }\n}\n\nexport default BattleVisualizer;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport './HelpOverlay.css';\n\nclass HelpOverlay extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showFullscreen: true\n    };\n\n    this.toggleFullscreenOverlay = this.toggleFullscreenOverlay.bind(this);\n  }\n  toggleFullscreenOverlay() {\n    this.setState({\n      showFullscreen: true\n    });\n  }\n  renderHouskeepingTooltip(props) {\n    return (\n      <Tooltip {...props} >\n        Author: <a href=\"http://github.com/halfacat1/\" target=\"_blank\" rel=\"noopener noreferrer\">Han Z.</a>\n        <br />\n        <br />\n        Built with:&nbsp;\n        <a href=\"https://www.echartsjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">ECharts</a>,&nbsp;\n        <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">React</a>\n        <br />\n        Powered by: <a href=\"https://www.wikidata.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Wikidata</a>\n      </Tooltip>\n    );\n  }\n  render() {\n    let self = this;\n    return (\n      <div className=\"HelpOverlay\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-xs HelpOverlayContainer\">\n              <FullscreenOverlay show={self.state.showFullscreen} />\n              <Button variant=\"outline-light\" onClick={self.toggleFullscreenOverlay}>\n                <span role=\"img\" className=\"Glow\" aria-labelledby=\"jsx-a11y/accessible-emoji\">💡</span>\n              </Button>\n            </div>\n            <div className=\"col-xs HelpOverlayContainer\">\n              <OverlayTrigger\n                placement=\"bottom\"\n                overlay={self.renderHouskeepingTooltip}\n                trigger=\"click\"\n              >\n                <Button variant=\"outline-light\">\n                  <span role=\"img\" aria-labelledby=\"jsx-a11y/accessible-emoji\">👋</span>\n                </Button>\n              </OverlayTrigger>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass FullscreenOverlay extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: props.show,\n      style: {\n        height: '100%',\n        opacity: 1\n      }\n    };\n    this.openFullscreenOverlay = this.openFullscreenOverlay.bind(this);\n    this.closeFullscreenOverlay = this.closeFullscreenOverlay.bind(this);\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.show && !prevState.show) {\n      this.openFullscreenOverlay();\n    }\n  }\n  openFullscreenOverlay() {\n    this.setState({\n      show: true,\n      style: {\n        height: '100%',\n        opacity: 1\n      }\n    });\n  }\n  closeFullscreenOverlay() {\n    this.setState({\n      show: false,\n      style: {\n        height: 0,\n        opacity: 0,\n      }\n    });\n  }\n  render() {\n    return (\n      <div\n        className=\"overlay\"\n        style={this.state.style}\n        onClick={this.closeFullscreenOverlay}\n      >\n        <div className=\"title\">\n          <h2>Carta Historia</h2>\n          <p>Visualize battles throughout history across the world!</p>\n          <h5>Instructions</h5>\n          <p><span role=\"img\" aria-labelledby=\"jsx-a11y/accessible-emoji\">🗺 + 🖱/👆🤏</span><br />Click/Scroll/Tap/Pinch to interact with the map</p>\n          <p><span role=\"img\" aria-labelledby=\"jsx-a11y/accessible-emoji\">🗺🔴🟠🟢 + 🖱/👆</span><br />Each dot on the map is a battle, colored by its date<br />Hover/Click to see info </p>\n          <p><span role=\"img\" aria-labelledby=\"jsx-a11y/accessible-emoji\">⬇📈 + ↔</span><br /><strong>Timeline</strong> (bottom) <br /> Drag to resize & move the timeline on the bottom, to change the range of battles to highlight</p>\n          <br />\n          <p>\n            <span className=\"Glow\" role=\"img\" aria-labelledby=\"jsx-a11y/accessible-emoji\">💡</span> to reopen this overlay\n          </p>\n            <h2><span role=\"img\" aria-labelledby=\"jsx-a11y/accessible-emoji\">🖱/👆</span>anywhere to begin!</h2>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HelpOverlay;\n","import React from 'react';\nimport './App.css'\nimport BattleVisualizer from './BattleVisualizer/BattleVisualizer';\nimport HelpOverlay from './HelpOverlay/HelpOverlay';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <HelpOverlay />\n        <BattleVisualizer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}