{"version":3,"sources":["BattleVisualizer/BattleVisualizer.js","HelpOverlay/HelpOverlay.js","App.js","serviceWorker.js","index.js"],"names":["BattleVisualizer","props","SCATTER_GL_SIZE","TIMELINE_BACKGROUND_COLOR","TIMELINE_LINE_COLOR","TEXT_COLOR","echartsInstance","state","fetch","window","location","href","response","this","text","createDatasetFromCsv","input","result","headers","items","rows","split","length","pop","shift","map","row","item","fields","i","dataset","results","reduce","accumulator","current","year","parseInt","isNaN","push","regex","concat","forEach","captures","exec","currentPropValue","tuples","Object","entries","pair","sort","a","b","name","battleLabel","value","lng","lat","self","echarts","init","document","getElementById","loadData","cleanYearInDataset","addGeoToDataset","on","dataZoom","getOption","setOption","visualMap","id","min","Math","round","startValue","max","endValue","textStyle","color","params","console","log","option","backgroundColor","geo","roam","label","emphasis","show","silent","itemStyle","normal","areaColor","borderColor","bottom","zlevel","zoom","grid","top","dimensions","source","xAxis","gridId","type","nameTextStyle","axisLabel","yAxis","series","progressive","coordinateSystem","symbolSize","blendMode","data","getScatterSeriesData","opacity","large","animation","tooltip","formatter","xAxisIndex","yAxisIndex","groupCountByYear","lineStyle","start","end","trigger","seriesIndex","dimension","splitNumber","inRange","outOfRange","value1","value2","onresize","resize","className","React","Component","renderHelpTooltip","Tooltip","role","aria-labelledby","renderHouskeepingTooltip","target","rel","HelpOverlay","OverlayTrigger","placement","overlay","Button","variant","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d401fa5e.chunk.js","sourcesContent":["import React from 'react';\nimport './BattleVisualizer.css';\nimport echarts from 'echarts';\nimport 'echarts-gl';\nimport 'echarts-maps/world';\n\nclass BattleVisualizer extends React.Component {\n  SCATTER_GL_SIZE = 3;\n  TIMELINE_BACKGROUND_COLOR = 'rgba(47, 57, 77, 0.5)';\n  TIMELINE_LINE_COLOR = 'rgba(146, 176, 155, 0.5)';\n  TEXT_COLOR = '#fff';\n\n  echartsInstance = null;\n\n  constructor(props) {\n    super(props)\n    this.state = {};\n  }\n  async loadData() {\n    let response = await fetch(`${window.location.href}/db.csv`);\n    return this.createDatasetFromCsv(await response.text());\n  }\n  createDatasetFromCsv(input) {\n    let result = {\n      headers: [],\n      items: []\n    };\n    let rows = input.split('\\n');\n    if (rows.length < 1) return result;\n    rows.pop();\n    let headers = rows.shift().split(',');\n    let items = rows.map(function (row) {\n      let item = {};\n      let fields = row.split(',');\n      for (let i = 0; i < headers.length; i++) {\n        item[headers[i]] = fields[i];\n      }\n      return item;\n    });\n    result.headers = headers;\n    result.items = items;\n    return result;\n  }\n  cleanYearInDataset(dataset) {\n    let results = dataset.items.reduce(function (accumulator, current) {\n      let year = parseInt(current.year);\n      if (!isNaN(year)) {\n        current.year = year;\n        accumulator.push(current);\n      }\n      return accumulator;\n    }, []);\n    dataset.items = results;\n  }\n  addGeoToDataset(dataset) {\n    let regex = /Point\\((-?[0-9]+[.]?[0-9]*) (-?[0-9]+[.]?[0-9]*)\\)/;\n    dataset.headers = dataset.headers.concat(['lat', 'lng']);\n    dataset.items.forEach(item => {\n      let captures = regex.exec(item['locationCoordinates']);\n      if (captures) {\n        item['lat'] = captures[2];\n        item['lng'] = captures[1];\n      }\n    });\n  }\n  groupCountByYear(items) {\n    let results = items.reduce(function (accumulator, current) {\n      let currentPropValue = current['year'];\n      if (!(currentPropValue in accumulator)) {\n        accumulator[currentPropValue] = 0;\n      }\n      accumulator[currentPropValue]++;\n      return accumulator;\n    }, {});\n    let tuples = Object.entries(results).map(function (pair) {\n      pair[0] = parseInt(pair);\n      return pair;\n    });\n    tuples.sort((a, b) => a[0] > b[0] ? 1 : -1);\n    return tuples;\n  }\n  getScatterSeriesData(dataset) {\n    return dataset.items.map(function (item) {\n      return {\n        name: item.battleLabel,\n        value: [item.lng, item.lat, item]\n      };\n    });\n  }\n\n  async componentDidMount() {\n    let self = this;\n    this.echartsInstance = echarts.init(document.getElementById('echarts_container'));\n\n    let dataset = await this.loadData();\n    this.cleanYearInDataset(dataset);\n    this.addGeoToDataset(dataset);\n\n    // Test code\n    // let southDeerfield = null;\n    // dataset.items.forEach(item => {\n    //   if (item['battle'] === 'http://www.wikidata.org/entity/Q885253') {\n    //     southDeerfield = item;\n    //   }\n    // });\n    // console.log(dataset);\n\n    this.echartsInstance.on('dataZoom', function () {\n      let dataZoom = self.echartsInstance.getOption().dataZoom[0];\n      self.echartsInstance.setOption({\n        visualMap: {\n          id: 'battles-geo-scattergl',\n          min: Math.round(dataZoom.startValue, 0),\n          max: Math.round(dataZoom.endValue, 0),\n          textStyle: {\n            color: self.TEXT_COLOR\n          },\n        }\n      });\n    });\n\n    this.echartsInstance.on('click', function (params) {\n      console.log(params);\n    });\n\n    var option = {\n      backgroundColor: '#000',\n      geo: {\n        map: 'world',\n        roam: true,\n        label: {\n          emphasis: {\n            show: false\n          }\n        },\n        silent: true,\n        itemStyle: {\n          normal: {\n            areaColor: '#323c48',\n            borderColor: '#111'\n          },\n          emphasis: {\n            areaColor: '#2a333d'\n          }\n        },\n        bottom: '30%',\n        zlevel: 100,\n        zoom: 4\n      },\n      grid: [\n        {\n          id: 'battles-time-line',\n          top: '70%',\n          show: true,\n          backgroundColor: self.TIMELINE_BACKGROUND_COLOR,\n          zlevel: 200\n        }\n      ],\n      dataset: {\n        dimensions: dataset.headers,\n        source: dataset.items\n      },\n      xAxis: {\n        id: 'battles-time-line-x',\n        gridId: 'battles-time-line',\n        type: 'value',\n        name: 'Year',\n        nameTextStyle: {\n          color: self.TEXT_COLOR\n        },\n        axisLabel: {\n          textStyle: {\n            color: self.TEXT_COLOR\n          }\n        },\n        zlevel: 201\n      },\n      yAxis: {\n        id: 'battles-time-line-y',\n        gridId: 'battles-time-line',\n        type: 'value',\n        name: 'Count',\n        nameTextStyle: {\n          color: self.TEXT_COLOR\n        },\n        axisLabel: {\n          textStyle: {\n            color: self.TEXT_COLOR\n          }\n        },\n        zlevel: 201,\n      },\n      series: [\n        {\n          id: 'battles-geo-scattergl',\n          type: 'scatterGL',\n          progressive: 1e6,\n          coordinateSystem: 'geo',\n          symbolSize: self.SCATTER_GL_SIZE,\n          blendMode: 'lighter',\n\n          zlevel: 101\n        },\n        {\n          id: 'battles-geo-scatter',\n          type: 'scatter',\n          coordinateSystem: 'geo',\n          data: self.getScatterSeriesData(dataset),\n          symbolSize: 15,\n          itemStyle: {\n            opacity: 0\n          },\n          large: true,\n          animation: false,\n          tooltip: {\n            formatter: function (params) {\n              let item = params.value[2];\n              return item.battleLabel + '<br/>' + item.year;\n            }\n          },\n          zlevel: 110\n        },\n        {\n          id: 'battles-time-line',\n          type: 'line',\n          xAxisIndex: 0,\n          yAxisIndex: 0,\n          data: this.groupCountByYear(dataset.items),\n          lineStyle: {\n            color: self.TIMELINE_LINE_COLOR\n          },\n          itemStyle: {\n            color: self.TEXT_COLOR,\n            borderColor: self.TEXT_COLOR\n          },\n          tooltip: {\n            show: false\n          },\n          zlevel: 201,\n        }\n      ],\n      dataZoom: [\n        {\n          id: 'battles-time-line',\n          type: 'slider',\n          show: true,\n          xAxisIndex: [0],\n          start: 40,\n          end: 55,\n          zlevel: 201\n        },\n      ],\n      tooltip: {\n        trigger: 'item',\n      },\n      visualMap: [\n        {\n          id: 'battles-geo-scattergl',\n          seriesIndex: 0,\n          dimension: 'year',\n          type: 'piecewise',\n          splitNumber: 10,\n          min: -3000,\n          max: 3000,\n          inRange: {\n            color: ['#94b9af', '#90a583', '#9d8420', '#593837', '#942911']\n          },\n          outOfRange: {\n            color: ['rgba(0, 0, 0, 0.5)']\n          },\n          textStyle: {\n            color: self.TEXT_COLOR\n          },\n          bottom: '35%',\n          formatter: function (value1, value2) {\n            return Math.round(value1) + ' to ' + Math.round(value2);\n          },\n          zlevel: 110\n        }\n      ]\n    };\n\n    this.echartsInstance.setOption(option, true);\n\n    window.onresize = function () {\n      self.echartsInstance.resize();\n    };\n  }\n  render() {\n    return (\n      <div className=\"BattleVisualizer\">\n        <div id=\"echarts_container\" className=\"ChartArea\"></div>\n      </div>\n    );\n  }\n}\n\nexport default BattleVisualizer;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport './HelpOverlay.css';\n\nfunction renderHelpTooltip(props) {\n  return (\n    <Tooltip {...props} >\n      <h4>Carta Historia</h4>\n      <p>Visualize battles throughout history across the world!</p>\n      <h6>Instructions</h6>\n      <span role=\"img\" aria-labelledby=\"jsx-a11y/accessible-emoji\">🗺 + 🖱/👆🤏</span>: Pan & Zoom<br />\n      <span role=\"img\" aria-labelledby=\"jsx-a11y/accessible-emoji\">📈 + ↔/</span>: Resize & Move the Year Filter<br />\n    </Tooltip>\n  );\n}\n\nfunction renderHouskeepingTooltip(props) {\n  return (\n    <Tooltip {...props} >\n      Author: <a href=\"http://github.com/halfacat1/\" target=\"_blank\" rel=\"noopener noreferrer\">Han Z.</a>\n      <br />\n      <br />\n      Built with:&nbsp;\n      <a href=\"https://www.echartsjs.com/\" target=\"_blank\" rel=\"noopener noreferrer\">ECharts</a>,&nbsp;\n      <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">React</a>\n      <br />\n      Powered by: <a href=\"https://www.wikidata.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Wikidata</a>\n    </Tooltip>\n  );\n}\n\nconst HelpOverlay = () => (\n  <div className=\"HelpOverlay\">\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-xs HelpOverlayContainer\">\n          <OverlayTrigger\n            placement=\"left\"\n            overlay={renderHelpTooltip}\n            trigger=\"click\"\n          >\n            <Button variant=\"outline-light\">\n              <span role=\"img\" className=\"Glow\" aria-labelledby=\"jsx-a11y/accessible-emoji\">💡</span>\n            </Button>\n          </OverlayTrigger>\n        </div>\n        <div className=\"col-xs HelpOverlayContainer\">\n          <OverlayTrigger\n            placement=\"bottom\"\n            overlay={renderHouskeepingTooltip}\n            trigger=\"click\"\n          >\n            <Button variant=\"outline-light\">\n              <span role=\"img\" aria-labelledby=\"jsx-a11y/accessible-emoji\">👋</span>\n            </Button>\n          </OverlayTrigger>\n        </div>\n      </div>\n    </div>\n\n  </div>\n);\n\nexport default HelpOverlay;\n","import React from 'react';\nimport './App.css'\nimport BattleVisualizer from './BattleVisualizer/BattleVisualizer';\nimport HelpOverlay from './HelpOverlay/HelpOverlay';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <HelpOverlay />\n        <BattleVisualizer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}