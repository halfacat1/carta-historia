{"version":3,"sources":["BattleVisualizer/BattleVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["BattleVisualizer","props","echartsInstance","state","fetch","window","location","href","response","this","text","createDatasetFromCsv","input","result","headers","items","rows","split","length","pop","shift","map","row","item","fields","i","dataset","results","reduce","accumulator","current","year","parseInt","isNaN","push","regex","concat","forEach","captures","exec","currentPropValue","tuples","Object","entries","pair","sort","a","b","self","echarts","init","document","getElementById","loadData","cleanYearInDataset","addGeoToDataset","on","event","dataZoom","getOption","setOption","visualMap","id","min","Math","round","startValue","max","endValue","textStyle","color","option","backgroundColor","geo","roam","label","emphasis","show","silent","itemStyle","normal","areaColor","borderColor","bottom","zlevel","zoom","grid","top","dimensions","source","xAxis","gridId","type","axisLabel","yAxis","series","progressive","coordinateSystem","symbolSize","zoomScale","blendMode","postEffect","enable","xAxisIndex","yAxisIndex","data","groupCountByYear","lineStyle","start","end","seriesIndex","dimension","splitNumber","inRange","outOfRange","onresize","resize","className","React","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.68bbfa01.chunk.js","sourcesContent":["import React from 'react';\nimport './BattleVisualizer.css';\nimport echarts from 'echarts';\nimport 'echarts-gl';\nimport 'echarts-maps/world';\n\nclass BattleVisualizer extends React.Component {\n  echartsInstance = null;\n  constructor(props) {\n    super(props)\n    this.state = {};\n  }\n  async loadData() {\n    let response = await fetch(`${window.location.href}/db.csv`);\n    return this.createDatasetFromCsv(await response.text());\n  }\n  createDatasetFromCsv(input) {\n    let result = {\n      headers: [],\n      items: []\n    };\n    let rows = input.split('\\n');\n    if (rows.length < 1) return result;\n    rows.pop();\n    let headers = rows.shift().split(',');\n    let items = rows.map(function (row) {\n      let item = {};\n      let fields = row.split(',');\n      for (let i = 0; i < headers.length; i++) {\n        item[headers[i]] = fields[i];\n      }\n      return item;\n    });\n    result.headers = headers;\n    result.items = items;\n    return result;\n  }\n  cleanYearInDataset(dataset) {\n    let results = dataset.items.reduce(function (accumulator, current) {\n      let year = parseInt(current.year);\n      if (!isNaN(year)) {\n        current.year = year;\n        accumulator.push(current);\n      }\n      return accumulator;\n    }, []);\n    dataset.items = results;\n  }\n  addGeoToDataset(dataset) {\n    let regex = /Point\\((-?[0-9]+[.]?[0-9]*) (-?[0-9]+[.]?[0-9]*)\\)/;\n    dataset.headers = dataset.headers.concat(['lat', 'lng']);\n    dataset.items.forEach(item => {\n      let captures = regex.exec(item['locationCoordinates']);\n      if (captures) {\n        item['lat'] = captures[2];\n        item['lng'] = captures[1];\n      }\n    });\n  }\n  groupCountByYear(items) {\n    let results = items.reduce(function (accumulator, current) {\n      let currentPropValue = current['year'];\n      if (!(currentPropValue in accumulator)) {\n        accumulator[currentPropValue] = 0;\n      }\n      accumulator[currentPropValue]++;\n      return accumulator;\n    }, {});\n    let tuples = Object.entries(results).map(function (pair) {\n      pair[0] = parseInt(pair);\n      return pair;\n    });\n    tuples.sort((a, b) => a[0] > b[0] ? 1 : -1);\n    return tuples;\n  }\n\n  async componentDidMount() {\n    let self = this;\n    this.echartsInstance = echarts.init(document.getElementById('echarts_container'));\n\n    let dataset = await this.loadData();\n    this.cleanYearInDataset(dataset);\n    this.addGeoToDataset(dataset);\n\n    // Test code\n    // let southDeerfield = null;\n    // dataset.items.forEach(item => {\n    //   if (item['battle'] === 'http://www.wikidata.org/entity/Q885253') {\n    //     southDeerfield = item;\n    //   }\n    // });\n    // console.log(dataset);\n\n    this.echartsInstance.on('dataZoom', function (event) {\n      let dataZoom = self.echartsInstance.getOption().dataZoom[0];\n      self.echartsInstance.setOption({\n        visualMap: {\n          id: 'battles-geo-scatter',\n          min: Math.round(dataZoom.startValue, 0),\n          max: Math.round(dataZoom.endValue, 0),\n          textStyle: {\n            color: '#fff'\n          },\n        }\n      });\n    });\n\n    var option = {\n      backgroundColor: '#000',\n      geo: {\n        map: 'world',\n        roam: true,\n        label: {\n          emphasis: {\n            show: false\n          }\n        },\n        silent: true,\n        itemStyle: {\n          normal: {\n            areaColor: '#323c48',\n            borderColor: '#111'\n          },\n          emphasis: {\n            areaColor: '#2a333d'\n          }\n        },\n        bottom: '30%',\n        zlevel: 100,\n        zoom: 3\n      },\n      grid: [\n        {\n          id: 'battles-time-line',\n          top: '70%',\n          show: true,\n          backgroundColor: '#2F394D',\n          zlevel: 200\n        }\n      ],\n      dataset: {\n        dimensions: dataset.headers,\n        source: dataset.items\n      },\n      xAxis: {\n        id: 'battles-time-line-x',\n        gridId: 'battles-time-line',\n        type: 'value',\n        axisLabel: {\n          textStyle: {\n            color: '#fff'\n          }\n        },\n        zlevel: 201\n      },\n      yAxis: {\n        id: 'battles-time-line-y',\n        gridId: 'battles-time-line',\n        type: 'value',\n        axisLabel: {\n          textStyle: {\n            color: '#fff'\n          }\n        },\n        zlevel: 201,\n      },\n      series: [\n        {\n          id: 'battles-geo-scatter',\n          type: 'scatterGL',\n          progressive: 1e6,\n          coordinateSystem: 'geo',\n          symbolSize: 2,\n          zoomScale: 0.002,\n          blendMode: 'lighter',\n          postEffect: {\n            enable: true\n          },\n          zlevel: 101\n        },\n        {\n          id: 'battles-time-line',\n          type: 'line',\n          xAxisIndex: 0,\n          yAxisIndex: 0,\n          data: this.groupCountByYear(dataset.items),\n          lineStyle: {\n            color: '#974716'\n          },\n          itemStyle: {\n            color: '#fff',\n            borderColor: '#fff'\n          },\n          zlevel: 201,\n        }\n      ],\n      dataZoom: [\n        {\n          id: 'battles-time-line',\n          type: 'slider',\n          show: true,\n          xAxisIndex: [0],\n          start: 40,\n          end: 55,\n          zlevel: 201\n        },\n      ],\n      visualMap: [\n        {\n          id: 'battles-geo-scatter',\n          seriesIndex: 0,\n          dimension: 'year',\n          type: 'piecewise',\n          splitNumber: 10,\n          min: -3000,\n          max: 3000,\n          inRange: {\n            color: ['#94b9af', '#90a583', '#9d8420', '#942911', '#593837']\n          },\n          outOfRange: {\n            color: ['#000000']\n          },\n          textStyle: {\n            color: '#fff'\n          },\n          bottom: '30%',\n          zlevel: 110\n        }\n      ]\n    };\n\n    this.echartsInstance.setOption(option, true);\n\n    window.onresize = function () {\n      self.echartsInstance.resize();\n    };\n  }\n  render() {\n    return (\n      <div className=\"BattleVisualizer\">\n        <div id=\"echarts_container\" className=\"ChartArea\"></div>\n      </div>\n    );\n  }\n}\n\nexport default BattleVisualizer;\n","import React from 'react';\nimport './App.css';\nimport BattleVisualizer from './BattleVisualizer/BattleVisualizer';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <BattleVisualizer></BattleVisualizer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}